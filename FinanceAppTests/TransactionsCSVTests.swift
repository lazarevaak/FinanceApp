import XCTest
@testable import FinanceApp

final class TransactionsCSVTests: XCTestCase {
    private let formatter: ISO8601DateFormatter = {
        let fmt = ISO8601DateFormatter()
        return fmt
    }()

    private var sampleTransaction: Transaction {
        let dateString = "2025-06-14T12:34:56Z"
        guard let date = formatter.date(from: dateString) else {
            fatalError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É")
        }
        let account = BankAccount(
            id: 42,
            name: "My Account",
            balance: Decimal(string: "1234.56")!,
            currency: "EUR"
        )
        let category = Category(
            id: 7,
            name: "Groceries",
            emoji: "üõí",
            isIncome: false
        )
        return Transaction(
            id: 99,
            account: account,
            category: category,
            amount: Decimal(string: "78.90")!,
            transactionDate: date,
            comment: "–ü–æ–∫—É–ø–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é",
            createdAt: date,
            updatedAt: date
        )
    }

    func testToCSVProducesCorrectNumberOfFieldsAndValues() {
        let tx = sampleTransaction
        let csv = tx.toCSV
        let parts = csv.split(separator: ",", omittingEmptySubsequences: false).map(String.init)

        XCTAssertEqual(parts.count, 14, "CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 14 –ø–æ–ª–µ–π")

        XCTAssertEqual(Int(parts[0]), tx.id)
        XCTAssertEqual(Int(parts[1]), tx.account.id)
        XCTAssertEqual(parts[2], tx.account.name)
        XCTAssertEqual(Decimal(string: parts[3]), tx.account.balance)
        XCTAssertEqual(parts[4], tx.account.currency)
        XCTAssertEqual(Int(parts[5]), tx.category.id)
        XCTAssertEqual(parts[6], tx.category.name)
        XCTAssertEqual(parts[7].first, tx.category.emoji)
        XCTAssertEqual(Bool(parts[8]), tx.category.isIncome)
        XCTAssertEqual(Decimal(string: parts[9]), tx.amount)

        guard let txDate = formatter.date(from: parts[10]) else {
            XCTFail("–ü–æ–ª–µ transactionDate –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π")
            return
        }
        XCTAssertEqual(txDate, tx.transactionDate)

        XCTAssertEqual(parts[11].isEmpty ? nil : parts[11], tx.comment)

        guard let created = formatter.date(from: parts[12]) else {
            XCTFail("–ü–æ–ª–µ createdAt –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π")
            return
        }
        XCTAssertEqual(created, tx.createdAt)

        guard let updated = formatter.date(from: parts[13]) else {
            XCTFail("–ü–æ–ª–µ updatedAt –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π")
            return
        }
        XCTAssertEqual(updated, tx.updatedAt)
    }

    func testFromCSVValidLineReturnsEquivalentTransaction() {
        let original = sampleTransaction
        let csv = original.toCSV

        guard let parsed = Transaction.fromCSV(csv) else {
            XCTFail("fromCSV –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç Transaction –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–µ CSV")
            return
        }

        XCTAssertEqual(parsed.id, original.id)
        XCTAssertEqual(parsed.account.id, original.account.id)
        XCTAssertEqual(parsed.account.name, original.account.name)
        XCTAssertEqual(parsed.account.balance, original.account.balance)
        XCTAssertEqual(parsed.account.currency, original.account.currency)
        XCTAssertEqual(parsed.category.id, original.category.id)
        XCTAssertEqual(parsed.category.name, original.category.name)
        XCTAssertEqual(parsed.category.emoji, original.category.emoji)
        XCTAssertEqual(parsed.category.isIncome, original.category.isIncome)
        XCTAssertEqual(parsed.amount, original.amount)
        XCTAssertEqual(parsed.transactionDate, original.transactionDate)
        XCTAssertEqual(parsed.comment, original.comment)
        XCTAssertEqual(parsed.createdAt, original.createdAt)
        XCTAssertEqual(parsed.updatedAt, original.updatedAt)
    }

    func testFromCSVLineWithEmptyCommentFieldYieldsNilComment() {
        var parts = sampleTransaction.toCSV
            .split(separator: ",", omittingEmptySubsequences: false)
            .map(String.init)
        parts[11] = ""
        let csv = parts.joined(separator: ",")

        guard let parsed = Transaction.fromCSV(csv) else {
            XCTFail("fromCSV –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É –¥–∞–∂–µ —Å –ø—É—Å—Ç—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º")
            return
        }
        XCTAssertNil(parsed.comment, "–ü—É—Å—Ç–æ–µ –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–æ–ª–∂–Ω–æ –¥–∞–≤–∞—Ç—å nil")
    }

    func testFromCSVInvalidNumberOfFieldsReturnsNil() {
        let tooFew = "1,2,Three,4"
        XCTAssertNil(Transaction.fromCSV(tooFew), "fromCSV –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å nil, –µ—Å–ª–∏ –ø–æ–ª–µ–π –º–µ–Ω—å—à–µ 14")

        let tooMany = Array(repeating: "x", count: 15).joined(separator: ",")
        XCTAssertNil(Transaction.fromCSV(tooMany), "fromCSV –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å nil, –µ—Å–ª–∏ –ø–æ–ª–µ–π –±–æ–ª—å—à–µ 14")
    }

    func testFromCSVWithMalformedFieldsReturnsNil() {
        var parts = sampleTransaction.toCSV
            .split(separator: ",", omittingEmptySubsequences: false)
            .map(String.init)
        parts[0] = "–Ω–µ —á–∏—Å–ª–æ"
        let csvBadId = parts.joined(separator: ",")
        XCTAssertNil(Transaction.fromCSV(csvBadId), "fromCSV –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å nil, –µ—Å–ª–∏ –ø–æ–ª–µ id –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ")

        parts = sampleTransaction.toCSV
            .split(separator: ",", omittingEmptySubsequences: false)
            .map(String.init)
        parts[10] = "–Ω–µ –¥–∞—Ç–∞"
        let csvBadDate = parts.joined(separator: ",")
        XCTAssertNil(Transaction.fromCSV(csvBadDate), "fromCSV –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å nil, –µ—Å–ª–∏ –ø–æ–ª–µ –¥–∞—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ")
    }
}
