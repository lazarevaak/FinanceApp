import XCTest
@testable import FinanceApp

final class TransactionsJSONTests: XCTestCase {
    private let formatter: ISO8601DateFormatter = {
        let fmt = ISO8601DateFormatter()
        fmt.formatOptions = [.withInternetDateTime, .withFractionalSeconds]
        return fmt
    }()

    private var sampleTransaction: Transaction {
        let dateString = "2025-06-14T12:34:56.000Z"
        guard let date = formatter.date(from: dateString) else {
            fatalError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏")
        }
        let account = BankAccount(
            id: 1,
            name: "Test Account",
            balance: Decimal(string: "100.00")!,
            currency: "USD"
        )
        let category = Category(
            id: 2,
            name: "Test Category",
            emoji: "üîß",
            isIncome: false
        )
        return Transaction(
            id: 123,
            account: account,
            category: category,
            amount: Decimal(string: "25.50")!,
            transactionDate: date,
            comment: "Unit test",
            createdAt: date,
            updatedAt: date
        )
    }

    func testJsonObjectProducesValidDictionary() {
        let tx = sampleTransaction
        let jsonObj = tx.jsonObject
        guard let dict = jsonObj as? [String: Any] else {
            XCTFail("jsonObject –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—ë–º [String: Any]")
            return
        }
        XCTAssertEqual(dict["id"] as? Int, tx.id, "–ü–æ–ª–µ id –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual((dict["amount"] as? NSNumber)?.decimalValue, tx.amount, "–ü–æ–ª–µ amount –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(dict["comment"] as? String, tx.comment, "–ü–æ–ª–µ comment –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å")

        if let dateStr = dict["transactionDate"] as? String,
           let parsed = ISO8601DateFormatter().date(from: dateStr) {
            XCTAssertEqual(parsed, tx.transactionDate, "transactionDate –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        } else {
            XCTFail("transactionDate –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å–∏—Ç—Å—è")
        }
        if let dateStr = dict["createdAt"] as? String,
           let parsed = ISO8601DateFormatter().date(from: dateStr) {
            XCTAssertEqual(parsed, tx.createdAt, "createdAt –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        } else {
            XCTFail("createdAt –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å–∏—Ç—Å—è")
        }
        if let dateStr = dict["updatedAt"] as? String,
           let parsed = ISO8601DateFormatter().date(from: dateStr) {
            XCTAssertEqual(parsed, tx.updatedAt, "updatedAt –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        } else {
            XCTFail("updatedAt –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å–∏—Ç—Å—è")
        }
    }

    func testParseValidJSONObjectReturnsTransaction() {
        let original = sampleTransaction
        let jsonObj = original.jsonObject
        guard let parsed = Transaction.parse(jsonObject: jsonObj) else {
            XCTFail("–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON-–æ–±—ä–µ–∫—Ç–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å nil")
            return
        }
        XCTAssertEqual(parsed.id, original.id, "id –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(parsed.account.id, original.account.id, "account.id –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(parsed.account.name, original.account.name, "account.name –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(parsed.account.balance, original.account.balance, "account.balance –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(parsed.account.currency, original.account.currency, "account.currency –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(parsed.category.id, original.category.id, "category.id –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(parsed.category.name, original.category.name, "category.name –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(parsed.category.emoji, original.category.emoji, "category.emoji –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(parsed.category.isIncome, original.category.isIncome, "category.isIncome –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(parsed.amount, original.amount, "amount –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(parsed.transactionDate, original.transactionDate, "transactionDate –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(parsed.comment, original.comment, "comment –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(parsed.createdAt, original.createdAt, "createdAt –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(parsed.updatedAt, original.updatedAt, "updatedAt –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
    }

    func testParseInvalidJSONObjectReturnsNil() {
        let nullObj = NSNull()
        XCTAssertNil(Transaction.parse(jsonObject: nullObj), "parse –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å nil –¥–ª—è NSNull")

        let incomplete: [String: Any] = ["id": 1]
        XCTAssertNil(Transaction.parse(jsonObject: incomplete), "parse –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å nil –¥–ª—è –Ω–µ–ø–æ–ª–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è")
    }

    func testRoundTripSerializationAndParsing() {
        let original = sampleTransaction
        let origJson = original.jsonObject as? [String: Any]
        XCTAssertNotNil(origJson, "jsonObject –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å nil")

        guard let roundTrip = Transaction.parse(jsonObject: origJson as Any) else {
            XCTFail("–ö—Ä—É–≥–æ–≤–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è")
            return
        }
        let reJson = roundTrip.jsonObject as? [String: Any]
        XCTAssertNotNil(reJson, "jsonObject –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å nil")

        let primitiveKeys: Set<String> = [
            "id", "amount", "comment",
            "transactionDate", "createdAt", "updatedAt"
        ]
        for key in primitiveKeys {
            let lhs = origJson![key]
            let rhs = reJson![key]
            if let num1 = lhs as? NSNumber, let num2 = rhs as? NSNumber {
                XCTAssertEqual(num1, num2, "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –∫–ª—é—á—É \(key)")
            } else if let str1 = lhs as? String, let str2 = rhs as? String {
                XCTAssertEqual(str1, str2, "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –∫–ª—é—á—É \(key)")
            } else {
                XCTFail("–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–∏–º–∏—Ç–∏–≤ –¥–ª—è –∫–ª—é—á–∞ \(key)")
            }
        }

        XCTAssertTrue(origJson!["account"] is [String: Any], "account –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—ë–º")
        XCTAssertTrue(origJson!["category"] is [String: Any], "category –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—ë–º")
        XCTAssertTrue(reJson!["account"] is [String: Any], "account –ø–æ—Å–ª–µ round-trip –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—ë–º")
        XCTAssertTrue(reJson!["category"] is [String: Any], "category –ø–æ—Å–ª–µ round-trip –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—ë–º")
    }

    func testJsonObjectErrorReturnsNSNull() {
        let date = formatter.date(from: "2025-06-14T12:34:56.000Z")!
        let badTransaction = Transaction(
            id: 999,
            account: BankAccount(
                id: 1,
                name: "Broken Account",
                balance: Decimal.nan,
                currency: "USD"
            ),
            category: Category(
                id: 1,
                name: "Broken Category",
                emoji: "‚ùå",
                isIncome: true
            ),
            amount: Decimal.nan,
            transactionDate: date,
            comment: nil,
            createdAt: date,
            updatedAt: date
        )

        let jsonObj = badTransaction.jsonObject
        XCTAssertTrue(jsonObj is NSNull, "jsonObject –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å NSNull() –ø—Ä–∏ –æ—à–∏–±–∫–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
    }
}
